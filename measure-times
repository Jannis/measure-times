#!/usr/bin/env python
# -
# Copyright (C) 2014 Jannis Pohlmann <jannis@xfce.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import cliapp
import datetime
import re
import subprocess


class MeasureTimes(cliapp.Application):

    def add_settings(self):
        self.settings.string_list(['benchmark-samples', 's'],
                                  'Benchmark sample to obtain a timestamp for',
                                  metavar='PATTERN')

    def process_args(self, args):
        starttime = datetime.datetime.now()

        process = subprocess.Popen(args,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout = process.stdout

        times = {}
        while True:
            line = stdout.readline().strip()
            if not line:
                break
            matches = self._sample_matches(line)
            if matches:
                times[(line, tuple(matches))] = datetime.datetime.now()
            print '%s' % line.strip()
        print

        stoptime = datetime.datetime.now()

        print 'Summary:'
        print
        print '%s: start' % starttime
        for key, time in sorted(times.iteritems(), key=lambda pair: pair[1]):
            line, matches = key
            print '%s: %s: %s' % (times[(line, matches)], matches, line)
        print '%s: stop' % stoptime
        print

    def _sample_matches(self, line):
        samples = self.settings['benchmark-samples']
        return [x for x in samples if re.match('^.*%s.*$' % x, line)]


if __name__ == '__main__':
    MeasureTimes().run()
